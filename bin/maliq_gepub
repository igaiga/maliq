#!/usr/bin/env ruby
# encoding: UTF-8
require "maliq"
require "trollop"
require "gepub"
require "stringio"

# a patch for Nokogiri::XML::Node#namespaces
# Hash[ alist ]  => Hash[ *alist.flatten ]
class Nokogiri::XML::Node
  def namespaces
    Hash[*namespace_scopes.map { |nd|
      key = ['xmlns', nd.prefix].compact.join(':')
      if RUBY_VERSION >= '1.9' && document.encoding
        begin
          key.force_encoding document.encoding
        rescue ArgumentError
        end
      end
      [key, nd.href]
    }.flatten]
  end
end

class OptionParser
  class << self
    def parse!
      opts = build_opts

      files = read_files
      markdowns = files.values_atx(:md, :markdown)
      metadata = read_metadata(markdowns.first)
      generate(metadata, files, opts)
    end

    def build_opts
      Trollop::options do
        version "Maliq #{Maliq::VERSION} (c) 2012 kyoendo"
        banner ~<<-EOS
          Maliq is a markdown, liquid converter for EPUB's xhtml.

          'maliq_gepub' command is a tool for generating a EPUB package
          using Gepub gem.

          Usage:

              1. Install gepub gem(gem install gepub)

              2. Set meta data required for Epub generation in Yaml Front
                 Matter(YFM) of your markdown file.

              3. Create xhtml files with 'maliq' command(see maliq -h). 

              4. fire up 'maliq_gepub' on the direcroty.

          where [options] are:
          EOS

          opt :output, "Output Epub filename", :default => 'out.epub'
          opt :toc, "Add Table of Contents page", :default => true
      end
    end

    # Returns a Hash, in which filenames are grouped by extname.
    def read_files
      Dir['*', '*/*'].group_by { |f| f.ext || :_dir }.to_symkey
    end

    # Returns a Hash of metadata.
    def read_metadata(path)
      unless path
        abort "Must exist a markdown filename which have Yaml Front Matter."
      end
      yml, _ = Maliq::FileUtils.retrieveYFM(File.read path)
      return nil if yml.empty?
      YAML.load(yml).to_symkey
    end

    def generate(metadata, files, opts)
      meta_nodes = GEPUB::Metadata::CONTENT_NODE_LIST + ["unique_identifier"]
      metadata.select! { |k, _| meta_nodes.include? k.to_s }
      csses  = files.values_atx(:css)
      images = files.values_atx(:png, :jpg, :jpeg, :gif, :bmp, :tiff)
      cover_images, images = images.partition { |f| File.basename(f, '.*').match /^cover/ }
      xhtmls = files.values_atx(:xhtml, :html)
      cover_xhtml = xhtmls.delete('cover.xhtml')

      # Create cover page if page not provided for a cover image.
      if (cover = cover_images.first) && !cover_xhtml
        cover_xhtml = create_cover_page(cover)
      end

      xhtmls.map! { |f| xhtml_with_heading f }

      # Create Table of Contents page.
      if opts[:toc] && no_nav_page?(xhtmls)
        nav_xhtml = create_nav_page(xhtmls, css:csses)
      end

      GEPUB::Builder.new do
        metadata.each { |k, v| send k, *Array(v) }

        resources(:workdir => '.') {
          csses.each { |f| file f }
          cover_image cover
          images.each { |f| file(f) }
          ordered {
            if cover_xhtml
              file 'cover.xhtml' => cover_xhtml
              heading 'Cover'
            end

            if nav_xhtml
              file 'nav.xhtml' => nav_xhtml
              heading 'Table of Contents'
            end

            xhtmls.each do |fname, head|
              file fname
              heading head
            end
          }
        }
      end.generate_epub(opts[:output])
    end

    def create_cover_page(cover)
      out = Maliq::Converter.new("![cover](#{cover})", title:'Cover').run
      StringIO.new(out)
    end

    def no_nav_page?(xhtmls)
      xhtmls.none? { |fname, _| File.basename(fname, '.*').match /(nav|toc)$/ }
    end

    def create_nav_page(xhtmls, opts={})
      out = Maliq::Converter.new(~<<-EOS, opts).run
      ## Table of Contents

      #{xhtmls.map { |fname, text| "1. [#{text}](#{fname})"  }.join("\n")}

      EOS
      StringIO.new(out)
    end

    def xhtml_with_heading(xhtml)
      heading = File.basename(xhtml, '.*').capitalize
      File.read(xhtml).match(/<h(?:1|2|3)>(.*?)<\/h(?:1|2|3)>/) { heading = $1 }
      [xhtml, heading]
    end
  end
end

OptionParser.parse!
